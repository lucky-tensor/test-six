//! Functional test for delay module

#![forbid(unsafe_code)]
use miner::config::*;
use abscissa_core::path::PathBuf;

#[test]
fn test_genesis_preimage() {
    // Create fixtures.
    let configs = MinerConfig {
        workspace: Workspace {
            miner_home: PathBuf::from("."),
            node_home: PathBuf::from("."),
        },
        profile: Profile {
            auth_key: "3e4629ba1e63114b59a161e89ad4a083b3a31b5fd59e39757c493e96398e4df2".to_owned(),
            account: None,
            operator_private_key: None,
            ip: None,
            statement: "Protests rage across the Nation".to_owned(),
        },
        chain_info: ChainInfo {
            chain_id: "0L testnet".to_owned(),
            block_dir: "blocks".to_owned(),
            base_waypoint: None,
            node: None,
        },
    };

    let first_preimage = MinerConfig::genesis_preimage(&configs);

    println!("proof:\n{:?}", hex::encode(&first_preimage));

    let correct_preimage = "3e4629ba1e63114b59a161e89ad4a083b3a31b5fd59e39757c493e96398e4df2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304c20746573746ef74657374732072616765206163726f737320746865204e6174696f6e";

    assert_eq!(hex::encode(&first_preimage), correct_preimage, "Preimages do not match")
}
