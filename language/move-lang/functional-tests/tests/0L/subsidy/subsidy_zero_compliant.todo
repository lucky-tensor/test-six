//! account: alice, 1000000GAS, 0, validator
//! account: bob, 1000000GAS, 0

//! block-prologue
//! proposer: alice
//! block-time: 1
//! NewBlockEvent

//! new-transaction
//! sender: bob
script {
    use 0x1::DiemSystem;
    use 0x1::MinerState;
    use 0x1::Globals;
    // use 0x1::GAS::GAS;
    use 0x1::TestFixtures;
    use 0x1::Debug::print;

    fun main(sender: signer) {
        // Tests on initial size of validators
        assert(DiemSystem::is_validator(@{{alice}}), 7357300101021000);
        assert(!DiemSystem::is_validator(@{{bob}}), 7357300101031000);
        
        MinerState::test_helper_init_miner(
            &sender,
            Globals::get_difficulty(),
            TestFixtures::alice_0_easy_chal(),
            TestFixtures::alice_0_easy_sol()
        );

        MinerState::test_helper_mock_mining(&sender, 5);

        // assert(MinerState::get_count_in_epoch(@{{bob}}) == 1, 7357300101041000);
        print(&MinerState::get_count_in_epoch(@{{bob}}));
        // assert(DiemAccount::balance<GAS>(@{{alice}}) == 1000000, 7357300101051000);
        // assert(NodeWeight::proof_of_weight(@{{alice}}) == 0, 7357300101051000);

        // Alice continues to mine after genesis.
        // This test is adapted from chained_from_genesis.move
        // MinerState::test_helper_mock_mining(&sender, 5);
        assert(MinerState::get_count_in_epoch(@{{bob}}) == 5, 7357300101071000);
    }
}
// check: EXECUTED


//////////////////////////////////////////////
///// Trigger reconfiguration at 61 seconds ////
//! block-prologue
//! proposer: alice
//! block-time: 61000000
//! round: 15

///// TEST RECONFIGURATION IS HAPPENING ////
// check: NewEpochEvent
//////////////////////////////////////////////

//! new-transaction
//! sender: diemroot
script {  
    // use 0x1::NodeWeight;
    use 0x1::GAS::GAS;
    use 0x1::DiemAccount;
    use 0x1::Subsidy;
    use 0x1::Globals;
    use 0x1::Debug::print;

    fun main(_vm: signer) {
        // We are in a new epoch.

        let expected_subsidy = Subsidy::subsidy_curve(
          Globals::get_subsidy_ceiling_gas(),
          0,
          Globals::get_max_validators_per_set(),
        );

        // let starting_balance = 1000000;

        // let operator_refund = 4336 * 5; // BASELINE_TX_COST * proofs = 21680

        // let ending_balance = starting_balance + expected_subsidy - operator_refund;

        print(&expected_subsidy);
        print(&DiemAccount::balance<GAS>(@{{alice}}));
        assert(expected_subsidy == 0, 7357000180113);  
        // assert(NodeWeight::proof_of_weight(@{{alice}}) == 1, 7357000180114);  
    }
}
//check: EXECUTED