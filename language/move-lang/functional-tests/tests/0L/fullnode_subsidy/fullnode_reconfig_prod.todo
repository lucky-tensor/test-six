//! account: alice, 1000000GAS, 0, validator
//! account: bob, 1000000GAS, 0


// Bob is an end-user running the Carpe app, and submitting miner proofs.
// He is the only one in the epoch submitting proofs. He should get the entirety of the Identity Subsidy pool avaialable (one validator's worth)

//  0. Initialize Bob's miner state with a first proof

//! new-transaction
//! sender: bob
script {
    use 0x1::TowerState;
    use 0x1::TestFixtures;

    fun main(sender: signer) {
        TowerState::test_helper_init_miner(
            &sender,
            TestFixtures::easy_chal(),
            TestFixtures::easy_sol(),
            TestFixtures::easy_difficulty(),
            TestFixtures::security(),
        );
    }
}


// 2. Make sure there are validator subsidies available.
// so we need Alice to be a Case 1 validator so that there is a subsidy to be paid to validator set.

//! new-transaction
//! sender: diemroot
script {
    use 0x1::Mock;

    fun main(vm: signer) {
      Mock::mock_case_1(&vm, @{{alice}});
    }
}
//check: EXECUTED




// // 3. Mock Bob (the end-user) submitting proofs above threshold.

//! new-transaction
//! sender: bob
script {
    use 0x1::DiemSystem;
    use 0x1::TowerState;
    use 0x1::Debug::print;
    use 0x1::GAS::GAS;
    use 0x1::DiemAccount;


    fun main(sender: signer) {
        // confirm bob is not a validator
        assert(DiemSystem::is_validator(@{{alice}}), 735706);
        assert(!DiemSystem::is_validator(@{{bob}}), 735707);
        // bring bob to 10 proofs. (Note: alice has one proof as a fullnode from genesis, so it will total 11 fullnode proofs.);

        print(&TowerState::get_fullnode_proofs_in_epoch());
        print(&TowerState::get_fullnode_proofs_in_epoch_above_thresh());

        // both Alice and Bob have a fullnode proof (Alice has one from Genesis)
        assert(TowerState::get_fullnode_proofs_in_epoch() == 2, 735708);
        // there should be no proofs above threshold at this point.
        assert(TowerState::get_fullnode_proofs_in_epoch_above_thresh() == 0, 735709);

        // Bob already has one proof above where we initialized the account, and is above threshold.
        // bob needs one more to be above threshold before the subsequent proofs are counted.
        // adding 10 more here (which are all above threshold).
        TowerState::test_helper_mock_mining(&sender, 11);
        print(&TowerState::get_fullnode_proofs_in_epoch());
        print(&TowerState::get_fullnode_proofs_in_epoch_above_thresh());

        print(&TowerState::get_count_in_epoch(@{{bob}}));
        print(&TowerState::get_count_above_thresh_in_epoch(@{{bob}}));

        
        // Since the threshold in test suite is 1 proof, all the 10 are counted above threshold.
        assert(TowerState::get_fullnode_proofs_in_epoch_above_thresh() == 10, 735710);

        print(&DiemAccount::balance<GAS>(@{{bob}}));
        print(&DiemAccount::balance<GAS>(@{{alice}}));

        
    }
}
// check: EXECUTED


//! new-transaction
//! sender: diemroot
script {
    use 0x1::Testnet;

    fun main(vm: signer) {
      Testnet::remove_testnet(&vm);
    }
}
//check: EXECUTED


// CHANGE THIS TO PROD GLOBALS


//////////////////////////////////////////////
///// Trigger reconfiguration at 61 seconds ////
//! block-prologue
//! proposer: alice
//! block-time: 864000000000
//! round: 15

///// TEST RECONFIGURATION IS HAPPENING ////
// check: NewEpochEvent
//////////////////////////////////////////////


// TODO: This is failing. Must be a test harness issue with prod settings also in _meta_epoch_prod.move

//! new-transaction
//! sender: diemroot
script {  
    // use 0x1::GAS::GAS;
    // use 0x1::DiemAccount;
    // use 0x1::Subsidy;
    // use 0x1::Globals;
    use 0x1::Debug::print;

    fun main(_vm: signer) {
        // We are in a new epoch.
        print(&12121212121212);
        // // we expect that Bob receives the share that one validator would get.
        // let expected_subsidy = Subsidy::subsidy_curve(
        //   Globals::get_subsidy_ceiling_gas(),
        //   1, // alice is the only validator (but below 4 the reward is the same in testnet: 296000000)
        //   Globals::get_max_validators_per_set(),
        // );

        // let bob_starting_balance = 1000000;

        // print(&expected_subsidy);

        // let ending_balance = bob_starting_balance + expected_subsidy;

        // print(&DiemAccount::balance<GAS>(@{{bob}}));
        // print(&DiemAccount::balance<GAS>(@{{alice}}));

        // // bob gets the whole subsidy
        // assert(DiemAccount::balance<GAS>(@{{bob}}) == ending_balance, 735711);  
    }
}
//check: EXECUTED